scalar DateTime

type Query {
  feed: [Post!]!
}

type Mutation {
  post(xDistance: Float!, yDistance: Float!, zDistance: Float!, privacy: Boolean!, description: String!): Post!
  editPost(id: ID!, description: String!): Post!
  deletePost(id: ID!): Post
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  comment(postId: ID!, text: String!): Comment!
  editComment(id: ID!, text: String!): Comment!
  deleteComment(id: ID!): Comment
  addMarker(description: String!, imageUrl: String!, longitude: Float!, latitude: Float!, height: Float!): Marker!
}

type Post {
  id: ID!
  description: String!
  createdAt: DateTime!
  xDistance: Float!
  yDistance: Float!
  zDistance: Float!
  privacy: Boolean!
  marker: Marker!
  postPostedBy: User!
  comments: [Comment!]!
}

type Marker {
  id: ID!
  imageUrl: String!
  description: String!
  longitude: Float!
  latitude: Float!
  height: Float!
  markerPostedBy: User!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  comments: [Comment!]!
  markers: [Marker!]!
}

type Subscription {
  newPost: Post
  newComment: Comment
}

type Comment {
  id: ID!
  text: String!
  post: Post!
  user: User!
  createdAt: DateTime!
}
