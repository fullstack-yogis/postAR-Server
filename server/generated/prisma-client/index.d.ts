// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  marker: (where?: MarkerWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  marker: (where: MarkerWhereUniqueInput) => MarkerNullablePromise;
  markers: (args?: {
    where?: MarkerWhereInput;
    orderBy?: MarkerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Marker>;
  markersConnection: (args?: {
    where?: MarkerWhereInput;
    orderBy?: MarkerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MarkerConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createMarker: (data: MarkerCreateInput) => MarkerPromise;
  updateMarker: (args: {
    data: MarkerUpdateInput;
    where: MarkerWhereUniqueInput;
  }) => MarkerPromise;
  updateManyMarkers: (args: {
    data: MarkerUpdateManyMutationInput;
    where?: MarkerWhereInput;
  }) => BatchPayloadPromise;
  upsertMarker: (args: {
    where: MarkerWhereUniqueInput;
    create: MarkerCreateInput;
    update: MarkerUpdateInput;
  }) => MarkerPromise;
  deleteMarker: (where: MarkerWhereUniqueInput) => MarkerPromise;
  deleteManyMarkers: (where?: MarkerWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  marker: (
    where?: MarkerSubscriptionWhereInput
  ) => MarkerSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "privacy_ASC"
  | "privacy_DESC"
  | "xDistance_ASC"
  | "xDistance_DESC"
  | "yDistance_ASC"
  | "yDistance_DESC"
  | "zDistance_ASC"
  | "zDistance_DESC"
  | "horRotation_ASC"
  | "horRotation_DESC"
  | "verRotation_ASC"
  | "verRotation_DESC"
  | "height_ASC"
  | "height_DESC"
  | "width_ASC"
  | "width_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MarkerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "height_ASC"
  | "height_DESC"
  | "plane_ASC"
  | "plane_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  privacy?: Maybe<Boolean>;
  privacy_not?: Maybe<Boolean>;
  xDistance?: Maybe<Float>;
  xDistance_not?: Maybe<Float>;
  xDistance_in?: Maybe<Float[] | Float>;
  xDistance_not_in?: Maybe<Float[] | Float>;
  xDistance_lt?: Maybe<Float>;
  xDistance_lte?: Maybe<Float>;
  xDistance_gt?: Maybe<Float>;
  xDistance_gte?: Maybe<Float>;
  yDistance?: Maybe<Float>;
  yDistance_not?: Maybe<Float>;
  yDistance_in?: Maybe<Float[] | Float>;
  yDistance_not_in?: Maybe<Float[] | Float>;
  yDistance_lt?: Maybe<Float>;
  yDistance_lte?: Maybe<Float>;
  yDistance_gt?: Maybe<Float>;
  yDistance_gte?: Maybe<Float>;
  zDistance?: Maybe<Float>;
  zDistance_not?: Maybe<Float>;
  zDistance_in?: Maybe<Float[] | Float>;
  zDistance_not_in?: Maybe<Float[] | Float>;
  zDistance_lt?: Maybe<Float>;
  zDistance_lte?: Maybe<Float>;
  zDistance_gt?: Maybe<Float>;
  zDistance_gte?: Maybe<Float>;
  horRotation?: Maybe<Float>;
  horRotation_not?: Maybe<Float>;
  horRotation_in?: Maybe<Float[] | Float>;
  horRotation_not_in?: Maybe<Float[] | Float>;
  horRotation_lt?: Maybe<Float>;
  horRotation_lte?: Maybe<Float>;
  horRotation_gt?: Maybe<Float>;
  horRotation_gte?: Maybe<Float>;
  verRotation?: Maybe<Float>;
  verRotation_not?: Maybe<Float>;
  verRotation_in?: Maybe<Float[] | Float>;
  verRotation_not_in?: Maybe<Float[] | Float>;
  verRotation_lt?: Maybe<Float>;
  verRotation_lte?: Maybe<Float>;
  verRotation_gt?: Maybe<Float>;
  verRotation_gte?: Maybe<Float>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  width?: Maybe<Float>;
  width_not?: Maybe<Float>;
  width_in?: Maybe<Float[] | Float>;
  width_not_in?: Maybe<Float[] | Float>;
  width_lt?: Maybe<Float>;
  width_lte?: Maybe<Float>;
  width_gt?: Maybe<Float>;
  width_gte?: Maybe<Float>;
  postPostedBy?: Maybe<UserWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  marker?: Maybe<MarkerWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  markers_every?: Maybe<MarkerWhereInput>;
  markers_some?: Maybe<MarkerWhereInput>;
  markers_none?: Maybe<MarkerWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  post?: Maybe<PostWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface MarkerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  markerPostedBy?: Maybe<UserWhereInput>;
  plane?: Maybe<String>;
  plane_not?: Maybe<String>;
  plane_in?: Maybe<String[] | String>;
  plane_not_in?: Maybe<String[] | String>;
  plane_lt?: Maybe<String>;
  plane_lte?: Maybe<String>;
  plane_gt?: Maybe<String>;
  plane_gte?: Maybe<String>;
  plane_contains?: Maybe<String>;
  plane_not_contains?: Maybe<String>;
  plane_starts_with?: Maybe<String>;
  plane_not_starts_with?: Maybe<String>;
  plane_ends_with?: Maybe<String>;
  plane_not_ends_with?: Maybe<String>;
  AND?: Maybe<MarkerWhereInput[] | MarkerWhereInput>;
  OR?: Maybe<MarkerWhereInput[] | MarkerWhereInput>;
  NOT?: Maybe<MarkerWhereInput[] | MarkerWhereInput>;
}

export type MarkerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  post: PostCreateOneWithoutCommentsInput;
  user: UserCreateOneWithoutCommentsInput;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  description: String;
  privacy: Boolean;
  xDistance: Float;
  yDistance: Float;
  zDistance: Float;
  horRotation: Float;
  verRotation: Float;
  height: Float;
  width: Float;
  postPostedBy: UserCreateOneWithoutPostsInput;
  marker: MarkerCreateOneInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  markers?: Maybe<MarkerCreateManyWithoutMarkerPostedByInput>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  post: PostCreateOneWithoutCommentsInput;
}

export interface MarkerCreateManyWithoutMarkerPostedByInput {
  create?: Maybe<
    | MarkerCreateWithoutMarkerPostedByInput[]
    | MarkerCreateWithoutMarkerPostedByInput
  >;
  connect?: Maybe<MarkerWhereUniqueInput[] | MarkerWhereUniqueInput>;
}

export interface MarkerCreateWithoutMarkerPostedByInput {
  id?: Maybe<ID_Input>;
  description: String;
  imageUrl: String;
  longitude: Float;
  latitude: Float;
  height: Float;
  plane: String;
}

export interface MarkerCreateOneInput {
  create?: Maybe<MarkerCreateInput>;
  connect?: Maybe<MarkerWhereUniqueInput>;
}

export interface MarkerCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  imageUrl: String;
  longitude: Float;
  latitude: Float;
  height: Float;
  markerPostedBy: UserCreateOneWithoutMarkersInput;
  plane: String;
}

export interface UserCreateOneWithoutMarkersInput {
  create?: Maybe<UserCreateWithoutMarkersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMarkersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutPostPostedByInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface PostCreateManyWithoutPostPostedByInput {
  create?: Maybe<
    PostCreateWithoutPostPostedByInput[] | PostCreateWithoutPostPostedByInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutPostPostedByInput {
  id?: Maybe<ID_Input>;
  description: String;
  privacy: Boolean;
  xDistance: Float;
  yDistance: Float;
  zDistance: Float;
  horRotation: Float;
  verRotation: Float;
  height: Float;
  width: Float;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  marker: MarkerCreateOneInput;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  user: UserCreateOneWithoutCommentsInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutPostPostedByInput>;
  markers?: Maybe<MarkerCreateManyWithoutMarkerPostedByInput>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  description?: Maybe<String>;
  privacy?: Maybe<Boolean>;
  xDistance?: Maybe<Float>;
  yDistance?: Maybe<Float>;
  zDistance?: Maybe<Float>;
  horRotation?: Maybe<Float>;
  verRotation?: Maybe<Float>;
  height?: Maybe<Float>;
  width?: Maybe<Float>;
  postPostedBy?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  marker?: Maybe<MarkerUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  markers?: Maybe<MarkerUpdateManyWithoutMarkerPostedByInput>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface MarkerUpdateManyWithoutMarkerPostedByInput {
  create?: Maybe<
    | MarkerCreateWithoutMarkerPostedByInput[]
    | MarkerCreateWithoutMarkerPostedByInput
  >;
  delete?: Maybe<MarkerWhereUniqueInput[] | MarkerWhereUniqueInput>;
  connect?: Maybe<MarkerWhereUniqueInput[] | MarkerWhereUniqueInput>;
  set?: Maybe<MarkerWhereUniqueInput[] | MarkerWhereUniqueInput>;
  disconnect?: Maybe<MarkerWhereUniqueInput[] | MarkerWhereUniqueInput>;
  update?: Maybe<
    | MarkerUpdateWithWhereUniqueWithoutMarkerPostedByInput[]
    | MarkerUpdateWithWhereUniqueWithoutMarkerPostedByInput
  >;
  upsert?: Maybe<
    | MarkerUpsertWithWhereUniqueWithoutMarkerPostedByInput[]
    | MarkerUpsertWithWhereUniqueWithoutMarkerPostedByInput
  >;
  deleteMany?: Maybe<MarkerScalarWhereInput[] | MarkerScalarWhereInput>;
  updateMany?: Maybe<
    | MarkerUpdateManyWithWhereNestedInput[]
    | MarkerUpdateManyWithWhereNestedInput
  >;
}

export interface MarkerUpdateWithWhereUniqueWithoutMarkerPostedByInput {
  where: MarkerWhereUniqueInput;
  data: MarkerUpdateWithoutMarkerPostedByDataInput;
}

export interface MarkerUpdateWithoutMarkerPostedByDataInput {
  description?: Maybe<String>;
  imageUrl?: Maybe<String>;
  longitude?: Maybe<Float>;
  latitude?: Maybe<Float>;
  height?: Maybe<Float>;
  plane?: Maybe<String>;
}

export interface MarkerUpsertWithWhereUniqueWithoutMarkerPostedByInput {
  where: MarkerWhereUniqueInput;
  update: MarkerUpdateWithoutMarkerPostedByDataInput;
  create: MarkerCreateWithoutMarkerPostedByInput;
}

export interface MarkerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  plane?: Maybe<String>;
  plane_not?: Maybe<String>;
  plane_in?: Maybe<String[] | String>;
  plane_not_in?: Maybe<String[] | String>;
  plane_lt?: Maybe<String>;
  plane_lte?: Maybe<String>;
  plane_gt?: Maybe<String>;
  plane_gte?: Maybe<String>;
  plane_contains?: Maybe<String>;
  plane_not_contains?: Maybe<String>;
  plane_starts_with?: Maybe<String>;
  plane_not_starts_with?: Maybe<String>;
  plane_ends_with?: Maybe<String>;
  plane_not_ends_with?: Maybe<String>;
  AND?: Maybe<MarkerScalarWhereInput[] | MarkerScalarWhereInput>;
  OR?: Maybe<MarkerScalarWhereInput[] | MarkerScalarWhereInput>;
  NOT?: Maybe<MarkerScalarWhereInput[] | MarkerScalarWhereInput>;
}

export interface MarkerUpdateManyWithWhereNestedInput {
  where: MarkerScalarWhereInput;
  data: MarkerUpdateManyDataInput;
}

export interface MarkerUpdateManyDataInput {
  description?: Maybe<String>;
  imageUrl?: Maybe<String>;
  longitude?: Maybe<Float>;
  latitude?: Maybe<Float>;
  height?: Maybe<Float>;
  plane?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface MarkerUpdateOneRequiredInput {
  create?: Maybe<MarkerCreateInput>;
  update?: Maybe<MarkerUpdateDataInput>;
  upsert?: Maybe<MarkerUpsertNestedInput>;
  connect?: Maybe<MarkerWhereUniqueInput>;
}

export interface MarkerUpdateDataInput {
  description?: Maybe<String>;
  imageUrl?: Maybe<String>;
  longitude?: Maybe<Float>;
  latitude?: Maybe<Float>;
  height?: Maybe<Float>;
  markerPostedBy?: Maybe<UserUpdateOneRequiredWithoutMarkersInput>;
  plane?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutMarkersInput {
  create?: Maybe<UserCreateWithoutMarkersInput>;
  update?: Maybe<UserUpdateWithoutMarkersDataInput>;
  upsert?: Maybe<UserUpsertWithoutMarkersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMarkersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutPostPostedByInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface PostUpdateManyWithoutPostPostedByInput {
  create?: Maybe<
    PostCreateWithoutPostPostedByInput[] | PostCreateWithoutPostPostedByInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutPostPostedByInput[]
    | PostUpdateWithWhereUniqueWithoutPostPostedByInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutPostPostedByInput[]
    | PostUpsertWithWhereUniqueWithoutPostPostedByInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutPostPostedByInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPostPostedByDataInput;
}

export interface PostUpdateWithoutPostPostedByDataInput {
  description?: Maybe<String>;
  privacy?: Maybe<Boolean>;
  xDistance?: Maybe<Float>;
  yDistance?: Maybe<Float>;
  zDistance?: Maybe<Float>;
  horRotation?: Maybe<Float>;
  verRotation?: Maybe<Float>;
  height?: Maybe<Float>;
  width?: Maybe<Float>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  marker?: Maybe<MarkerUpdateOneRequiredInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutPostPostedByInput>;
  markers?: Maybe<MarkerUpdateManyWithoutMarkerPostedByInput>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutPostPostedByInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPostPostedByDataInput;
  create: PostCreateWithoutPostPostedByInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  privacy?: Maybe<Boolean>;
  privacy_not?: Maybe<Boolean>;
  xDistance?: Maybe<Float>;
  xDistance_not?: Maybe<Float>;
  xDistance_in?: Maybe<Float[] | Float>;
  xDistance_not_in?: Maybe<Float[] | Float>;
  xDistance_lt?: Maybe<Float>;
  xDistance_lte?: Maybe<Float>;
  xDistance_gt?: Maybe<Float>;
  xDistance_gte?: Maybe<Float>;
  yDistance?: Maybe<Float>;
  yDistance_not?: Maybe<Float>;
  yDistance_in?: Maybe<Float[] | Float>;
  yDistance_not_in?: Maybe<Float[] | Float>;
  yDistance_lt?: Maybe<Float>;
  yDistance_lte?: Maybe<Float>;
  yDistance_gt?: Maybe<Float>;
  yDistance_gte?: Maybe<Float>;
  zDistance?: Maybe<Float>;
  zDistance_not?: Maybe<Float>;
  zDistance_in?: Maybe<Float[] | Float>;
  zDistance_not_in?: Maybe<Float[] | Float>;
  zDistance_lt?: Maybe<Float>;
  zDistance_lte?: Maybe<Float>;
  zDistance_gt?: Maybe<Float>;
  zDistance_gte?: Maybe<Float>;
  horRotation?: Maybe<Float>;
  horRotation_not?: Maybe<Float>;
  horRotation_in?: Maybe<Float[] | Float>;
  horRotation_not_in?: Maybe<Float[] | Float>;
  horRotation_lt?: Maybe<Float>;
  horRotation_lte?: Maybe<Float>;
  horRotation_gt?: Maybe<Float>;
  horRotation_gte?: Maybe<Float>;
  verRotation?: Maybe<Float>;
  verRotation_not?: Maybe<Float>;
  verRotation_in?: Maybe<Float[] | Float>;
  verRotation_not_in?: Maybe<Float[] | Float>;
  verRotation_lt?: Maybe<Float>;
  verRotation_lte?: Maybe<Float>;
  verRotation_gt?: Maybe<Float>;
  verRotation_gte?: Maybe<Float>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  width?: Maybe<Float>;
  width_not?: Maybe<Float>;
  width_in?: Maybe<Float[] | Float>;
  width_not_in?: Maybe<Float[] | Float>;
  width_lt?: Maybe<Float>;
  width_lte?: Maybe<Float>;
  width_gt?: Maybe<Float>;
  width_gte?: Maybe<Float>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  description?: Maybe<String>;
  privacy?: Maybe<Boolean>;
  xDistance?: Maybe<Float>;
  yDistance?: Maybe<Float>;
  zDistance?: Maybe<Float>;
  horRotation?: Maybe<Float>;
  verRotation?: Maybe<Float>;
  height?: Maybe<Float>;
  width?: Maybe<Float>;
}

export interface UserUpsertWithoutMarkersInput {
  update: UserUpdateWithoutMarkersDataInput;
  create: UserCreateWithoutMarkersInput;
}

export interface MarkerUpsertNestedInput {
  update: MarkerUpdateDataInput;
  create: MarkerCreateInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface MarkerUpdateInput {
  description?: Maybe<String>;
  imageUrl?: Maybe<String>;
  longitude?: Maybe<Float>;
  latitude?: Maybe<Float>;
  height?: Maybe<Float>;
  markerPostedBy?: Maybe<UserUpdateOneRequiredWithoutMarkersInput>;
  plane?: Maybe<String>;
}

export interface MarkerUpdateManyMutationInput {
  description?: Maybe<String>;
  imageUrl?: Maybe<String>;
  longitude?: Maybe<Float>;
  latitude?: Maybe<Float>;
  height?: Maybe<Float>;
  plane?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  privacy: Boolean;
  xDistance: Float;
  yDistance: Float;
  zDistance: Float;
  horRotation: Float;
  verRotation: Float;
  height: Float;
  width: Float;
  postPostedBy: UserCreateOneWithoutPostsInput;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  marker: MarkerCreateOneInput;
}

export interface PostUpdateInput {
  description?: Maybe<String>;
  privacy?: Maybe<Boolean>;
  xDistance?: Maybe<Float>;
  yDistance?: Maybe<Float>;
  zDistance?: Maybe<Float>;
  horRotation?: Maybe<Float>;
  verRotation?: Maybe<Float>;
  height?: Maybe<Float>;
  width?: Maybe<Float>;
  postPostedBy?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  marker?: Maybe<MarkerUpdateOneRequiredInput>;
}

export interface PostUpdateManyMutationInput {
  description?: Maybe<String>;
  privacy?: Maybe<Boolean>;
  xDistance?: Maybe<Float>;
  yDistance?: Maybe<Float>;
  zDistance?: Maybe<Float>;
  horRotation?: Maybe<Float>;
  verRotation?: Maybe<Float>;
  height?: Maybe<Float>;
  width?: Maybe<Float>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutPostPostedByInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  markers?: Maybe<MarkerCreateManyWithoutMarkerPostedByInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutPostPostedByInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  markers?: Maybe<MarkerUpdateManyWithoutMarkerPostedByInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface MarkerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MarkerWhereInput>;
  AND?: Maybe<MarkerSubscriptionWhereInput[] | MarkerSubscriptionWhereInput>;
  OR?: Maybe<MarkerSubscriptionWhereInput[] | MarkerSubscriptionWhereInput>;
  NOT?: Maybe<MarkerSubscriptionWhereInput[] | MarkerSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  post: <T = PostPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  post: <T = PostSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  post: <T = PostPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  privacy: Boolean;
  xDistance: Float;
  yDistance: Float;
  zDistance: Float;
  horRotation: Float;
  verRotation: Float;
  height: Float;
  width: Float;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  privacy: () => Promise<Boolean>;
  xDistance: () => Promise<Float>;
  yDistance: () => Promise<Float>;
  zDistance: () => Promise<Float>;
  horRotation: () => Promise<Float>;
  verRotation: () => Promise<Float>;
  height: () => Promise<Float>;
  width: () => Promise<Float>;
  postPostedBy: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  marker: <T = MarkerPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  privacy: () => Promise<AsyncIterator<Boolean>>;
  xDistance: () => Promise<AsyncIterator<Float>>;
  yDistance: () => Promise<AsyncIterator<Float>>;
  zDistance: () => Promise<AsyncIterator<Float>>;
  horRotation: () => Promise<AsyncIterator<Float>>;
  verRotation: () => Promise<AsyncIterator<Float>>;
  height: () => Promise<AsyncIterator<Float>>;
  width: () => Promise<AsyncIterator<Float>>;
  postPostedBy: <T = UserSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  marker: <T = MarkerSubscription>() => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  privacy: () => Promise<Boolean>;
  xDistance: () => Promise<Float>;
  yDistance: () => Promise<Float>;
  zDistance: () => Promise<Float>;
  horRotation: () => Promise<Float>;
  verRotation: () => Promise<Float>;
  height: () => Promise<Float>;
  width: () => Promise<Float>;
  postPostedBy: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  marker: <T = MarkerPromise>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markers: <T = FragmentableArray<Marker>>(args?: {
    where?: MarkerWhereInput;
    orderBy?: MarkerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markers: <T = Promise<AsyncIterator<MarkerSubscription>>>(args?: {
    where?: MarkerWhereInput;
    orderBy?: MarkerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markers: <T = FragmentableArray<Marker>>(args?: {
    where?: MarkerWhereInput;
    orderBy?: MarkerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Marker {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  imageUrl: String;
  longitude: Float;
  latitude: Float;
  height: Float;
  plane: String;
}

export interface MarkerPromise extends Promise<Marker>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  imageUrl: () => Promise<String>;
  longitude: () => Promise<Float>;
  latitude: () => Promise<Float>;
  height: () => Promise<Float>;
  markerPostedBy: <T = UserPromise>() => T;
  plane: () => Promise<String>;
}

export interface MarkerSubscription
  extends Promise<AsyncIterator<Marker>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  height: () => Promise<AsyncIterator<Float>>;
  markerPostedBy: <T = UserSubscription>() => T;
  plane: () => Promise<AsyncIterator<String>>;
}

export interface MarkerNullablePromise
  extends Promise<Marker | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  imageUrl: () => Promise<String>;
  longitude: () => Promise<Float>;
  latitude: () => Promise<Float>;
  height: () => Promise<Float>;
  markerPostedBy: <T = UserPromise>() => T;
  plane: () => Promise<String>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MarkerConnection {
  pageInfo: PageInfo;
  edges: MarkerEdge[];
}

export interface MarkerConnectionPromise
  extends Promise<MarkerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MarkerEdge>>() => T;
  aggregate: <T = AggregateMarkerPromise>() => T;
}

export interface MarkerConnectionSubscription
  extends Promise<AsyncIterator<MarkerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MarkerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMarkerSubscription>() => T;
}

export interface MarkerEdge {
  node: Marker;
  cursor: String;
}

export interface MarkerEdgePromise extends Promise<MarkerEdge>, Fragmentable {
  node: <T = MarkerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MarkerEdgeSubscription
  extends Promise<AsyncIterator<MarkerEdge>>,
    Fragmentable {
  node: <T = MarkerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMarker {
  count: Int;
}

export interface AggregateMarkerPromise
  extends Promise<AggregateMarker>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarkerSubscription
  extends Promise<AsyncIterator<AggregateMarker>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MarkerSubscriptionPayload {
  mutation: MutationType;
  node: Marker;
  updatedFields: String[];
  previousValues: MarkerPreviousValues;
}

export interface MarkerSubscriptionPayloadPromise
  extends Promise<MarkerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MarkerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarkerPreviousValuesPromise>() => T;
}

export interface MarkerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarkerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarkerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarkerPreviousValuesSubscription>() => T;
}

export interface MarkerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  imageUrl: String;
  longitude: Float;
  latitude: Float;
  height: Float;
  plane: String;
}

export interface MarkerPreviousValuesPromise
  extends Promise<MarkerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  imageUrl: () => Promise<String>;
  longitude: () => Promise<Float>;
  latitude: () => Promise<Float>;
  height: () => Promise<Float>;
  plane: () => Promise<String>;
}

export interface MarkerPreviousValuesSubscription
  extends Promise<AsyncIterator<MarkerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  height: () => Promise<AsyncIterator<Float>>;
  plane: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  privacy: Boolean;
  xDistance: Float;
  yDistance: Float;
  zDistance: Float;
  horRotation: Float;
  verRotation: Float;
  height: Float;
  width: Float;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  privacy: () => Promise<Boolean>;
  xDistance: () => Promise<Float>;
  yDistance: () => Promise<Float>;
  zDistance: () => Promise<Float>;
  horRotation: () => Promise<Float>;
  verRotation: () => Promise<Float>;
  height: () => Promise<Float>;
  width: () => Promise<Float>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  privacy: () => Promise<AsyncIterator<Boolean>>;
  xDistance: () => Promise<AsyncIterator<Float>>;
  yDistance: () => Promise<AsyncIterator<Float>>;
  zDistance: () => Promise<AsyncIterator<Float>>;
  horRotation: () => Promise<AsyncIterator<Float>>;
  verRotation: () => Promise<AsyncIterator<Float>>;
  height: () => Promise<AsyncIterator<Float>>;
  width: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Marker",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
